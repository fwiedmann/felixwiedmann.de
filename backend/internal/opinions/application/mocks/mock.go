// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/fwiedmann/site/backend/internal/opinions/application (interfaces: Repository,PolicyEnforcementPoint,IdService,TimeService)

// Package mock_application is a generated GoMock package.
package mock_application

import (
	context "context"
	reflect "reflect"
	time "time"

	application "github.com/fwiedmann/site/backend/internal/opinions/application"
	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateOpinion mocks base method.
func (m *MockRepository) CreateOpinion(arg0 context.Context, arg1 application.Opinion) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOpinion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOpinion indicates an expected call of CreateOpinion.
func (mr *MockRepositoryMockRecorder) CreateOpinion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOpinion", reflect.TypeOf((*MockRepository)(nil).CreateOpinion), arg0, arg1)
}

// CreateVote mocks base method.
func (m *MockRepository) CreateVote(arg0 context.Context, arg1 application.Vote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVote indicates an expected call of CreateVote.
func (mr *MockRepositoryMockRecorder) CreateVote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVote", reflect.TypeOf((*MockRepository)(nil).CreateVote), arg0, arg1)
}

// DeleteOpinion mocks base method.
func (m *MockRepository) DeleteOpinion(arg0 context.Context, arg1 application.OpinionId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOpinion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOpinion indicates an expected call of DeleteOpinion.
func (mr *MockRepositoryMockRecorder) DeleteOpinion(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOpinion", reflect.TypeOf((*MockRepository)(nil).DeleteOpinion), arg0, arg1)
}

// DeleteVote mocks base method.
func (m *MockRepository) DeleteVote(arg0 context.Context, arg1 application.OpinionId) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVote indicates an expected call of DeleteVote.
func (mr *MockRepositoryMockRecorder) DeleteVote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVote", reflect.TypeOf((*MockRepository)(nil).DeleteVote), arg0, arg1)
}

// UpdateVote mocks base method.
func (m *MockRepository) UpdateVote(arg0 context.Context, arg1 application.Vote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVote", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVote indicates an expected call of UpdateVote.
func (mr *MockRepositoryMockRecorder) UpdateVote(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVote", reflect.TypeOf((*MockRepository)(nil).UpdateVote), arg0, arg1)
}

// MockPolicyEnforcementPoint is a mock of PolicyEnforcementPoint interface.
type MockPolicyEnforcementPoint struct {
	ctrl     *gomock.Controller
	recorder *MockPolicyEnforcementPointMockRecorder
}

// MockPolicyEnforcementPointMockRecorder is the mock recorder for MockPolicyEnforcementPoint.
type MockPolicyEnforcementPointMockRecorder struct {
	mock *MockPolicyEnforcementPoint
}

// NewMockPolicyEnforcementPoint creates a new mock instance.
func NewMockPolicyEnforcementPoint(ctrl *gomock.Controller) *MockPolicyEnforcementPoint {
	mock := &MockPolicyEnforcementPoint{ctrl: ctrl}
	mock.recorder = &MockPolicyEnforcementPointMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicyEnforcementPoint) EXPECT() *MockPolicyEnforcementPointMockRecorder {
	return m.recorder
}

// RequestAccessForUser mocks base method.
func (m *MockPolicyEnforcementPoint) RequestAccessForUser(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestAccessForUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestAccessForUser indicates an expected call of RequestAccessForUser.
func (mr *MockPolicyEnforcementPointMockRecorder) RequestAccessForUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestAccessForUser", reflect.TypeOf((*MockPolicyEnforcementPoint)(nil).RequestAccessForUser), arg0, arg1)
}

// MockIdService is a mock of IdService interface.
type MockIdService struct {
	ctrl     *gomock.Controller
	recorder *MockIdServiceMockRecorder
}

// MockIdServiceMockRecorder is the mock recorder for MockIdService.
type MockIdServiceMockRecorder struct {
	mock *MockIdService
}

// NewMockIdService creates a new mock instance.
func NewMockIdService(ctrl *gomock.Controller) *MockIdService {
	mock := &MockIdService{ctrl: ctrl}
	mock.recorder = &MockIdServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdService) EXPECT() *MockIdServiceMockRecorder {
	return m.recorder
}

// GenerateId mocks base method.
func (m *MockIdService) GenerateId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateId indicates an expected call of GenerateId.
func (mr *MockIdServiceMockRecorder) GenerateId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateId", reflect.TypeOf((*MockIdService)(nil).GenerateId))
}

// MockTimeService is a mock of TimeService interface.
type MockTimeService struct {
	ctrl     *gomock.Controller
	recorder *MockTimeServiceMockRecorder
}

// MockTimeServiceMockRecorder is the mock recorder for MockTimeService.
type MockTimeServiceMockRecorder struct {
	mock *MockTimeService
}

// NewMockTimeService creates a new mock instance.
func NewMockTimeService(ctrl *gomock.Controller) *MockTimeService {
	mock := &MockTimeService{ctrl: ctrl}
	mock.recorder = &MockTimeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeService) EXPECT() *MockTimeServiceMockRecorder {
	return m.recorder
}

// CurrentTime mocks base method.
func (m *MockTimeService) CurrentTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// CurrentTime indicates an expected call of CurrentTime.
func (mr *MockTimeServiceMockRecorder) CurrentTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentTime", reflect.TypeOf((*MockTimeService)(nil).CurrentTime))
}
